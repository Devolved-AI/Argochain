[package]
name = "staging-node-cli"
version = "3.0.0"
authors.workspace = true
description = "Generic Substrate node implementation in Rust. "
build = "build.rs"
edition.workspace = true
license = "GPL-3.0-or-later WITH Classpath-exception-2.0"
default-run = "argochain"
homepage = "https://substrate.io"
repository.workspace = true
publish = false

[lints]
workspace = true

[package.metadata.wasm-pack.profile.release]
# `wasm-opt` has some problems on linux, see
# https://github.com/rustwasm/wasm-pack/issues/781 etc.
wasm-opt = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[badges]
maintenance = { status = "actively-developed" }
is-it-maintained-issue-resolution = { repository = "paritytech/polkadot-sdk" }
is-it-maintained-open-issues = { repository = "paritytech/polkadot-sdk" }

[[bin]]
name = "argochain"
path = "bin/main.rs"
required-features = ["cli"]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
# third-party dependencies
array-bytes = { workspace = true, default-features = true }
clap = { features = ["derive"], optional = true, workspace = true }
codec = { workspace = true, default-features = true }
serde = { features = ["derive"], workspace = true, default-features = true }
jsonrpsee = { features = ["server"], workspace = true }
futures = { workspace = true }
# keyring = "3.6.1"
log = { workspace = true, default-features = true }
rand = { workspace = true, default-features = true }
serde_json = { workspace = true, default-features = true }
polkadot-sdk = { features = ["node"], workspace = true, default-features = true }
argochain-runtime.workspace = true
node-rpc.workspace = true
node-primitives.workspace = true
node-primitives.default-features = true
node-inspect = { optional = true, workspace = true, default-features = true }
babe-consensus-data-provider = {path = "../../../../client/babe-consensus-data-provider"}
ecdsa-keyring = {path = "../../../../client/ecdsa-keyring"}

# Substrate
prometheus-endpoint = { package = "substrate-prometheus-endpoint", workspace = true }
sc-basic-authorship = { workspace = true }
sc-chain-spec = { workspace = true }
sc-cli = { workspace = true }
sc-client-api = { workspace = true }
sc-consensus = { workspace = true }
sc-consensus-aura = { workspace = true }
sc-consensus-grandpa = { workspace = true }
sc-consensus-manual-seal = { workspace = true }
sc-executor = { workspace = true }
sc-network = { workspace = true }
sc-network-sync = { workspace = true }
sc-offchain = { workspace = true }
sc-rpc = { workspace = true }
sc-rpc-api = { workspace = true }
sc-service = { workspace = true }
sc-telemetry = { workspace = true }
sc-transaction-pool = { workspace = true }
sc-transaction-pool-api = { workspace = true }
sp-api = { workspace = true, features = ["default"] }
sp-block-builder = { workspace = true }
sp-blockchain = { workspace = true }
sp-consensus-aura = { workspace = true, features = ["default"] }
sp-consensus-grandpa = { workspace = true, features = ["default"] }
sp-core = { workspace = true, features = ["default"] }
sp-inherents = { workspace = true, features = ["default"] }
sp-io = { workspace = true, features = ["default"] }
sp-offchain = { workspace = true, features = ["default"] }
sp-runtime = { workspace = true, features = ["default"] }
sp-session = { workspace = true, features = ["default"] }
sp-timestamp = { workspace = true, features = ["default"] }
sp-transaction-pool = { workspace = true, features = ["default"] }
# These dependencies are used for RPC
frame-system-rpc-runtime-api = { workspace = true }
pallet-transaction-payment-rpc = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
substrate-frame-rpc-system = { workspace = true }
# These dependencies are used for runtime benchmarking
frame-benchmarking = { workspace = true, optional = true }
frame-benchmarking-cli = { workspace = true, optional = true }
frame-system = { workspace = true }
pallet-transaction-payment = { workspace = true }

# Frontier
fc-api = { workspace = true }
fc-cli = { workspace = true }
fc-consensus = { workspace = true }
fc-db = { workspace = true, features = ["sql"]}
fc-mapping-sync = { workspace = true, features = ["sql"] }
fc-rpc = { workspace = true }
fc-rpc-core = { workspace = true }
fc-storage = { workspace = true }
fp-account = { workspace = true }
fp-dynamic-fee = { workspace = true, features = ["default"] }
fp-evm = { workspace = true, features = ["default"] }
fp-rpc = { workspace = true, features = ["default"] }





[dev-dependencies]
futures = { workspace = true }
tempfile = { workspace = true }

assert_cmd = { workspace = true }
nix = { features = ["signal"], workspace = true }
regex = { workspace = true }
platforms = { workspace = true }
soketto = { workspace = true }
criterion = { features = ["async_tokio"], workspace = true, default-features = true }
tokio = { features = ["macros", "parking_lot", "time"], workspace = true, default-features = true }
tokio-util = { features = ["compat"], workspace = true }
wait-timeout = { workspace = true }
wat = { workspace = true }
serde_json = { workspace = true, default-features = true }
scale-info = { features = ["derive", "serde"], workspace = true, default-features = true }
# These testing-only dependencies are not exported by the Polkadot-SDK crate:
node-testing = { path = "../testing" }
substrate-cli-test-utils = { path = "../../../test-utils/cli" }
sc-service-test = { path = "../../../client/service/test" }

[build-dependencies]
clap = { optional = true, workspace = true }
clap_complete = { optional = true, workspace = true }
node-inspect = { optional = true, workspace = true, default-features = true }
polkadot-sdk = { features = ["frame-benchmarking-cli", "sc-cli", "sc-storage-monitor", "substrate-build-script-utils"], optional = true, workspace = true, default-features = true }




[features]
default = ["cli"]
cli = [
	"clap",
	"clap_complete",
	"node-inspect",
	"polkadot-sdk",
]
runtime-benchmarks = [
	"argochain-runtime/runtime-benchmarks",
	"node-inspect?/runtime-benchmarks",
	"polkadot-sdk/runtime-benchmarks",
]
try-runtime = [
	"argochain-runtime/try-runtime",
	"polkadot-sdk/try-runtime",
]

[[bench]]
name = "transaction_pool"
harness = false

[[bench]]
name = "block_production"
harness = false

[[bench]]
name = "executor"
harness = false
