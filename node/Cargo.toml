[package]
name = "argochain"
version = "2.0.0"
description = "Client node"
authors = ["argochain"]
edition = "2021"
publish = false
build = "build.rs"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]


[dependencies]
array-bytes = "6.1"
clap = { version = "4.2.5", features = ["derive"], optional = true }

hex-literal = "0.3.4"
codec = { package = "parity-scale-codec", version = "3.6.1" }
rand = "0.8"
futures-timer = "3.0"

jsonrpsee = { version = "0.24.7", features = ["server"] }
hex = { version = "0.4", default-features = false }
serde_json = "1.0.85"
serde = { version = "1.0.163", features = ["derive"] }
log = "0.4.17"
#rand = "0.8"


futures = "0.3.21"
sc-cli = { workspace=true }
sp-core = { workspace=true }
sc-executor = { workspace=true }
sc-service = { workspace=true }
sc-telemetry = { workspace=true }
sc-keystore = { workspace=true }
sp-keystore = { workspace=true }
sc-transaction-pool = {  workspace=true }
sc-transaction-pool-api = {  workspace=true }
sc-consensus-babe = {  workspace=true }
sc-consensus-slots = {  workspace=true }
sp-consensus-babe = { workspace=true }
sp-consensus-grandpa = { workspace = true, features = ["default"] }
sp-std = { default-features = false, workspace=true }
sp-consensus = { workspace=true }
sc-consensus = {  workspace=true }
sc-consensus-epochs = {  workspace=true }
sc-consensus-grandpa = "0.30.0"
sc-client-api = {  workspace=true }
sc-chain-spec = {  workspace=true }
sc-network = { workspace=true }
sc-consensus-manual-seal = { git = "https://github.com/paritytech/polkadot-sdk", branch = "stable2409" }
sp-io = { git = "https://github.com/paritytech/polkadot-sdk", branch = "stable2409" }
sp-genesis-builder = {default-features = false, workspace=true }


sc-network-common = {  workspace=true }
sp-runtime = { workspace=true, default-features = false }
sp-timestamp = { workspace=true }
sp-inherents = { workspace=true }
sp-offchain = { workspace = true, features = ["default"] }
sp-session = { workspace = true, features = ["default"] }
sp-keyring = {  workspace=true }
sp-transaction-storage-proof = { workspace=true }
sp-authority-discovery = {  default-features = false, workspace=true }
sc-sync-state-rpc = { default-features = false, workspace=true }
sc-sysinfo = {   workspace=true }
sc-network-sync = {  workspace=true  }
sc-statement-store = { workspace=true }
sp-consensus-aura = { workspace=true}
sc-consensus-aura = { workspace=true}

sc-offchain = { workspace=true }
sc-storage-monitor = {  workspace=true  }
sc-network-statement = {  workspace=true }
sp-statement-store = { workspace=true }
sc-rpc-spec-v2 = { workspace=true }
sp-transaction-pool = { workspace = true, features = ["default"] }
grandpa = {  package = "sc-consensus-grandpa", workspace=true }
# These dependencies are used for the node template's RPCs
jsonrpc-core = { workspace=true }
sc-rpc = { workspace=true }
sp-api = { workspace=true }
sc-rpc-api = {  workspace=true }
# sc-consensus-grandpa = {  workspace=true }
docify = { workspace=true }



sc-service-test = {workspace=true }
sc-block-builder = {  workspace=true }
sp-tracing = {  workspace=true  }
sp-blockchain = {  workspace=true }
sp-block-builder = { workspace=true }
sc-basic-authorship = { workspace=true }
sc-consensus-babe-rpc = { workspace=true }
sc-consensus-grandpa-rpc = {  workspace=true }
substrate-frame-rpc-system = {  workspace=true }
pallet-transaction-payment-rpc = { workspace=true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
substrate-state-trie-migration-rpc = {  workspace=true  }
sc-authority-discovery = { workspace=true  }
pallet-assets = { workspace=true}
pallet-asset-tx-payment = {  workspace=true }
pallet-asset-conversion-tx-payment = { workspace=true }

mmr-rpc = {  workspace=true }
frame-metadata-hash-extension = { workspace=true }


# These dependencies are used for runtime benchmarking
frame-benchmarking = {  workspace=true }
frame-benchmarking-cli = {  workspace=true }

# frame dependencies
pallet-im-online = { workspace=true }
frame-system = {  workspace=true }
pallet-transaction-payment = {  workspace=true }
frame-system-rpc-runtime-api = {   workspace=true }


# Frontier
fc-cli = { path = "../client/cli" }
fc-consensus = { path = "../client/consensus" }
fc-db = { path = "../client/db" }
fc-mapping-sync = { path = "../client/mapping-sync" }
fc-rpc = { path = "../client/rpc" }
fc-rpc-core = { path = "../client/rpc-core" }
fp-consensus = { path = "../primitives/consensus" }
fp-dynamic-fee = { path = "../primitives/dynamic-fee" }
fp-evm = { path = "../primitives/evm", default-features = false }
fp-rpc = { path = "../primitives/rpc" }
fp-storage = { path = "../primitives/storage" }
pallet-evm = { path = "../frame/evm" }
fc-storage = { workspace = true }


# Local Dependencies
argochain-runtime = {  workspace=true }
node-primitives = {  workspace=true, default-features = false  }

[build-dependencies]
substrate-build-script-utils = { workspace=true, optional = true}


clap = {  workspace=true, optional = true }
clap_complete = {  workspace=true, optional = true }
sc-cli = { workspace=true, optional = true }
frame-benchmarking-cli = { optional = true, workspace=true }





[dev-dependencies]
substrate-cli-test-utils = { workspace=true }




sc-client-db = {  workspace=true }
futures = "0.3.21"
futures-timer = { version = "3.0.2" }
tempfile = "3.1.0"
assert_cmd = "2.0.2"
nix = { version = "0.26.1", features = ["signal"] }
serde_json = "1.0"
regex = "1.6.0"
platforms = "3.0"
soketto = "0.7.1"
criterion = { version = "0.4.0", features = ["async_tokio"] }
tokio = { version = "1.22.0", features = ["macros", "time", "parking_lot"] }
tokio-util = { version = "0.7.4", features = ["compat"] }
wait-timeout = "0.2"
substrate-rpc-client = { workspace=true }
pallet-timestamp = { version = "37.0.0", workspace=true }



[features]
default = ["cli"]
cli = [
	"sc-cli",
	"frame-benchmarking-cli",
	"sc-service/rocksdb",
	"clap",
	"clap_complete",
	"substrate-build-script-utils",
]
# Dependencies that are only required if runtime benchmarking should be build.
runtime-benchmarks = [
	"argochain-runtime/runtime-benchmarks",
	"frame-benchmarking/runtime-benchmarks",
	"frame-benchmarking-cli/runtime-benchmarks",
]
# Enable features that allow the runtime to be tried and debugged. Name might be subject to change
# in the near future.
try-runtime = ["argochain-runtime/try-runtime"]
