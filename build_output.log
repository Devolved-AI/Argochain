warning: /Users/pavondunbar/Argochain-Upgrade/precompiles/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/frame/base-fee/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/primitives/rpc/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/frame/hotfix-sufficients/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/primitives/ethereum/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/frame/ethereum/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/primitives/self-contained/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/frame/evm/precompile/dispatch/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/client/cli/Cargo.toml: unused manifest key: dev-dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/client/mapping-sync/Cargo.toml: unused manifest key: dev-dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/primitives/account/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/client/db/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/primitives/consensus/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/precompiles/tests-external/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/frame/evm/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/frame/evm-chain-id/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/frame/evm/precompile/storage-cleaner/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/frame/dynamic-fee/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/client/storage/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/primitives/storage/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/client/api/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/client/rpc/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/primitives/evm/Cargo.toml: unused manifest key: dependencies.codec.package
warning: /Users/pavondunbar/Argochain-Upgrade/substrate/bin/node/cli/Cargo.toml: unused manifest key: dependencies.prometheus-endpoint.package
warning: unexpected `cfg` condition value: `never`
  --> substrate/primitives/runtime-interface/src/lib.rs:20:13
   |
20 | #![cfg_attr(feature = "never", rustfmt::skip)]
   |             ^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `default`, `disable_target_static_assertions`, and `std`
   = help: consider adding `never` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `substrate_runtime`
   --> substrate/primitives/runtime-interface/src/lib.rs:381:66
    |
381 | #[cfg(all(any(target_arch = "riscv32", target_arch = "riscv64"), substrate_runtime))]
    |                                                                  ^^^^^^^^^^^^^^^^^
    |
    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(substrate_runtime)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(substrate_runtime)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `sp-runtime-interface` (lib) generated 2 warnings
warning: unexpected `cfg` condition value: `bandersnatch-experimental`
  --> substrate/primitives/core/src/lib.rs:73:7
   |
73 | #[cfg(feature = "bandersnatch-experimental")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `blake2`, `bls-experimental`, `bs58`, `default`, `dyn-clonable`, `full_crypto`, `futures`, `impl-serde`, `itertools`, `parking_lot`, `rand`, `secp256k1`, `serde`, `sp-externalities`, `std`, `thiserror`, `tracing`, and `w3f-bls`
   = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: `sp-core` (lib) generated 1 warning
warning: unexpected `cfg` condition value: `bandersnatch-experimental`
  --> substrate/primitives/keystore/src/lib.rs:27:7
   |
27 | #[cfg(feature = "bandersnatch-experimental")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
   = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:743:2
    |
743 |     feature = "bandersnatch-experimental",
    |     ^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
  --> substrate/primitives/keystore/src/testing.rs:22:7
   |
22 | #[cfg(feature = "bandersnatch-experimental")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
   = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/testing.rs:219:8
    |
219 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/testing.rs:224:8
    |
224 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/testing.rs:233:8
    |
233 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/testing.rs:243:8
    |
243 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/testing.rs:253:8
    |
253 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/testing.rs:267:8
    |
267 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:195:8
    |
195 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:202:8
    |
202 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:217:8
    |
217 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:232:8
    |
232 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:247:8
    |
247 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:270:8
    |
270 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:447:10
    |
447 |             #[cfg(feature = "bandersnatch-experimental")]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:569:8
    |
569 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:574:8
    |
574 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:583:8
    |
583 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:593:8
    |
593 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:603:8
    |
603 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
   --> substrate/primitives/keystore/src/lib.rs:613:8
    |
613 |     #[cfg(feature = "bandersnatch-experimental")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `bls-experimental`, `default`, and `std`
    = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `runtime-benchmarks`
   --> substrate/primitives/weights/src/weight_v2.rs:404:34
    |
404 | #[cfg(any(test, feature = "std", feature = "runtime-benchmarks"))]
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `default`, `full-metadata-docs`, `json-schema`, `serde`, and `std`
    = help: consider adding `runtime-benchmarks` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `runtime-benchmarks`
   --> substrate/primitives/weights/src/weight_v2.rs:411:34
    |
411 | #[cfg(any(test, feature = "std", feature = "runtime-benchmarks"))]
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `default`, `full-metadata-docs`, `json-schema`, `serde`, and `std`
    = help: consider adding `runtime-benchmarks` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `sp-keystore` (lib) generated 22 warnings
warning: `sp-weights` (lib) generated 2 warnings
warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead
  --> substrate/primitives/panic-handler/src/lib.rs:33:16
   |
33 |     panic::{self, PanicInfo},
   |                   ^^^^^^^^^
   |
   = note: `#[warn(deprecated)]` on by default

warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead
   --> substrate/primitives/panic-handler/src/lib.rs:148:22
    |
148 | fn panic_hook(info: &PanicInfo, report_url: &str, version: &str) {
    |                      ^^^^^^^^^

warning: `sp-panic-handler` (lib) generated 2 warnings
warning: unexpected `cfg` condition name: `enable_alloc_error_handler`
  --> substrate/primitives/io/src/lib.rs:78:13
   |
78 | #![cfg_attr(enable_alloc_error_handler, feature(alloc_error_handler))]
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(enable_alloc_error_handler)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(enable_alloc_error_handler)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
  --> substrate/primitives/io/src/lib.rs:97:7
   |
97 | #[cfg(feature = "bandersnatch-experimental")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `bls-experimental`, `default`, `disable_allocator`, `disable_oom`, `disable_panic_handler`, `ed25519-dalek`, `improved_panic_error_reporting`, `libsecp256k1`, `log`, `secp256k1`, `sp-keystore`, `sp-state-machine`, `sp-trie`, `std`, and `with-tracing`
   = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `substrate_runtime`
   --> substrate/primitives/io/src/lib.rs:134:47
    |
134 | #[cfg(all(not(feature = "disable_allocator"), substrate_runtime, target_family = "wasm"))]
    |                                               ^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(substrate_runtime)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(substrate_runtime)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `substrate_runtime`
   --> substrate/primitives/io/src/lib.rs:139:2
    |
139 |     substrate_runtime,
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(substrate_runtime)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(substrate_runtime)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `substrate_runtime`
    --> substrate/primitives/io/src/lib.rs:1772:51
     |
1772 | #[cfg(all(not(feature = "disable_panic_handler"), substrate_runtime))]
     |                                                   ^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(substrate_runtime)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(substrate_runtime)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `enable_alloc_error_handler`
    --> substrate/primitives/io/src/lib.rs:1789:41
     |
1789 | #[cfg(all(not(feature = "disable_oom"), enable_alloc_error_handler))]
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(enable_alloc_error_handler)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(enable_alloc_error_handler)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
    --> substrate/primitives/io/src/lib.rs:1247:8
     |
1247 |     #[cfg(feature = "bandersnatch-experimental")]
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `bls-experimental`, `default`, `disable_allocator`, `disable_oom`, `disable_panic_handler`, `ed25519-dalek`, `improved_panic_error_reporting`, `libsecp256k1`, `log`, `secp256k1`, `sp-keystore`, `sp-state-machine`, `sp-trie`, `std`, and `with-tracing`
     = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `substrate_runtime`
    --> substrate/primitives/io/src/lib.rs:1563:1
     |
1563 | #[runtime_interface(wasm_only)]
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: using a cfg inside a attribute macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `runtime_interface` crate for guidance on how handle this unexpected cfg
     = help: the attribute macro `runtime_interface` may come from an old version of the `sp_runtime_interface_proc_macro` crate, try updating your dependency with `cargo update -p sp_runtime_interface_proc_macro`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `runtime_interface` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `substrate_runtime`
    --> substrate/primitives/io/src/lib.rs:1578:1
     |
1578 | #[runtime_interface(wasm_only)]
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: using a cfg inside a attribute macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `runtime_interface` crate for guidance on how handle this unexpected cfg
     = help: the attribute macro `runtime_interface` may come from an old version of the `sp_runtime_interface_proc_macro` crate, try updating your dependency with `cargo update -p sp_runtime_interface_proc_macro`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `runtime_interface` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `substrate_runtime`
    --> substrate/primitives/io/src/lib.rs:1636:1
     |
1636 | #[runtime_interface(wasm_only, no_tracing)]
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: using a cfg inside a attribute macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `runtime_interface` crate for guidance on how handle this unexpected cfg
     = help: the attribute macro `runtime_interface` may come from an old version of the `sp_runtime_interface_proc_macro` crate, try updating your dependency with `cargo update -p sp_runtime_interface_proc_macro`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `runtime_interface` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `sp-io` (lib) generated 10 warnings
warning: unexpected `cfg` condition value: `bandersnatch-experimental`
  --> substrate/primitives/application-crypto/src/lib.rs:47:7
   |
47 | #[cfg(feature = "bandersnatch-experimental")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `bls-experimental`, `default`, `full_crypto`, `serde`, and `std`
   = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: `sp-application-crypto` (lib) generated 1 warning
warning: `#[cfg_attr]` does not expand to any attributes
  --> substrate/primitives/runtime/src/generic/unchecked_extrinsic.rs:61:1
   |
61 | #[cfg_attr(all(feature = "std", not(windows)),)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_attributes)]` on by default

warning: `sp-runtime` (lib) generated 1 warning
warning: unexpected `cfg` condition name: `substrate_runtime`
   --> substrate/primitives/api/src/lib.rs:112:67
    |
112 |     #[cfg(all(any(target_arch = "riscv32", target_arch = "riscv64"), substrate_runtime))]
    |                                                                      ^^^^^^^^^^^^^^^^^
    |
    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(substrate_runtime)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(substrate_runtime)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: `sp-api` (lib) generated 1 warning
warning: unexpected `cfg` condition value: `try-runtime`
   --> substrate/frame/support/procedural/src/lib.rs:323:31
    |
323 |     if cfg!(any(feature = "std", feature = "try-runtime")) {
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `default`, `experimental`, `no-metadata-docs`, `std`, `tuples-128`, and `tuples-96`
    = help: consider adding `try-runtime` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: `frame-support-procedural` (lib) generated 1 warning
warning: unexpected `cfg` condition name: `no_std`
   --> substrate/frame/support/src/lib.rs:895:11
    |
895 | #[cfg(not(no_std))]
    |           ^^^^^^
    |
    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(no_std)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(no_std)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: `frame-support` (lib) generated 1 warning
warning: `sp-runtime-interface` (lib) generated 2 warnings (2 duplicates)
warning: `sp-core` (lib) generated 1 warning (1 duplicate)
warning: `sp-panic-handler` (lib) generated 2 warnings (2 duplicates)
warning: `sp-keystore` (lib) generated 22 warnings (22 duplicates)
warning: `sp-io` (lib) generated 10 warnings (10 duplicates)
warning: `sp-application-crypto` (lib) generated 1 warning (1 duplicate)
warning: `sp-weights` (lib) generated 2 warnings (2 duplicates)
warning: `sp-runtime` (lib) generated 1 warning (1 duplicate)
warning: field `peer` is never read
  --> substrate/client/network/src/behaviour.rs:75:3
   |
73 |     InboundRequest {
   |     -------------- field in this variant
74 |         /// Peer which sent us a request.
75 |         peer: PeerId,
   |         ^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: field `peer` is never read
  --> substrate/client/network/src/behaviour.rs:88:3
   |
86 |     RequestFinished {
   |     --------------- field in this variant
87 |         /// Peer that we send a request to.
88 |         peer: PeerId,
   |         ^^^^

warning: fields `protocol_version`, `user_agent`, and `observed_address` are never read
  --> substrate/client/network/src/litep2p/discovery.rs:89:3
   |
84 |     Identified {
   |     ---------- fields in this variant
...
89 |         protocol_version: Option<String>,
   |         ^^^^^^^^^^^^^^^^
...
92 |         user_agent: Option<String>,
   |         ^^^^^^^^^^
...
95 |         observed_address: Multiaddr,
   |         ^^^^^^^^^^^^^^^^
   |
   = note: `DiscoveryEvent` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `inbound` is never read
   --> substrate/client/network/src/protocol/notifications/behaviour.rs:366:3
    |
350 |     CustomProtocolOpen {
    |     ------------------ field in this variant
...
366 |         inbound: bool,
    |         ^^^^^^^
    |
    = note: `NotificationsOut` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `endpoint` is never read
   --> substrate/client/network/src/protocol/notifications/handler.rs:285:3
    |
279 |     OpenResultOk {
    |     ------------ field in this variant
...
285 |         endpoint: ConnectedPoint,
    |         ^^^^^^^^
    |
    = note: `NotifsHandlerOut` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `negotiated_fallback` is never read
   --> substrate/client/network/src/protocol/notifications/upgrade/notifications.rs:196:6
    |
191 | pub struct NotificationsInOpen<TSubstream> {
    |            ------------------- field in this struct
...
196 |     pub negotiated_fallback: Option<ProtocolName>,
    |         ^^^^^^^^^^^^^^^^^^^

warning: field `issued_light_requests` is never read
  --> substrate/client/network/src/service/metrics.rs:75:6
   |
67 | pub struct Metrics {
   |            ------- field in this struct
...
75 |     pub issued_light_requests: Counter<U64>,
   |         ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `Metrics` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: `sc-network` (lib) generated 7 warnings
warning: `sp-api` (lib) generated 1 warning (1 duplicate)
warning: `sc-network` (lib) generated 7 warnings (7 duplicates)
warning: unexpected `cfg` condition value: `fuzzing`
   --> substrate/frame/election-provider-support/src/lib.rs:691:38
    |
691 |     any(feature = "runtime-benchmarks", feature = "fuzzing", feature = "std"),
    |                                         ^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `default`, `fuzz`, `runtime-benchmarks`, `std`, and `try-runtime`
    = help: consider adding `fuzzing` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: `frame-election-provider-support` (lib) generated 1 warning
warning: unexpected `cfg` condition value: `bandersnatch-experimental`
  --> substrate/primitives/keyring/src/lib.rs:29:7
   |
29 | #[cfg(feature = "bandersnatch-experimental")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `default` and `std`
   = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `bandersnatch-experimental`
  --> substrate/primitives/keyring/src/lib.rs:36:7
   |
36 | #[cfg(feature = "bandersnatch-experimental")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `default` and `std`
   = help: consider adding `bandersnatch-experimental` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `sp-keyring` (lib) generated 2 warnings
warning: unexpected `cfg` condition name: `build_type`
   --> substrate/client/consensus/slots/src/lib.rs:230:11
    |
230 |                 #[cfg(build_type = "debug")]
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(build_type, values("debug"))'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(build_type, values(\"debug\"))");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: `sc-consensus-slots` (lib) generated 1 warning
warning: trait `ReadPlusSeek` is never used
  --> substrate/client/cli/src/commands/import_blocks_cmd.rs:62:7
   |
62 | trait ReadPlusSeek: Read + Seek {}
   |       ^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `sc-cli` (lib) generated 1 warning
warning: `frame-support` (lib) generated 1 warning (1 duplicate)
warning: `sp-keyring` (lib) generated 2 warnings (2 duplicates)
warning: `sc-cli` (lib) generated 1 warning (1 duplicate)
warning: field `id` is never read
  --> substrate/client/consensus/beefy/src/fisherman.rs:37:6
   |
36 | pub struct ProvedValidator<'a, AuthorityId: AuthorityIdBound> {
   |            --------------- field in this struct
37 |     pub id: &'a AuthorityId,
   |         ^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `sc-consensus-beefy` (lib) generated 1 warning
warning: unexpected `cfg` condition name: `build_profile`
  --> substrate/utils/frame/benchmarking-cli/src/shared/mod.rs:87:10
   |
87 |     if cfg!(build_profile = "debug") {
   |             ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(build_profile, values("debug"))'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(build_profile, values(\"debug\"))");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `build_opt_level`
  --> substrate/utils/frame/benchmarking-cli/src/shared/mod.rs:89:18
   |
89 |     } else if !cfg!(build_opt_level = "3") {
   |                     ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(build_opt_level, values("3"))'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(build_opt_level, values(\"3\"))");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `frame-benchmarking-cli` (lib) generated 2 warnings
warning: `frame-benchmarking-cli` (lib) generated 2 warnings (2 duplicates)
warning: trait `WeightInfo` is never used
  --> substrate/frame/benchmarking/pov/src/weights.rs:48:11
   |
48 | pub trait WeightInfo {
   |           ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: struct `SubstrateWeight` is never constructed
  --> substrate/frame/benchmarking/pov/src/weights.rs:82:12
   |
82 | pub struct SubstrateWeight<T>(PhantomData<T>);
   |            ^^^^^^^^^^^^^^^

warning: `frame-benchmarking-pallet-pov` (lib) generated 2 warnings
warning: struct `InputFromRng` is never constructed
    --> substrate/frame/society/src/lib.rs:1390:8
     |
1390 | struct InputFromRng<'a, T>(&'a mut T);
     |        ^^^^^^^^^^^^
     |
     = note: `#[warn(dead_code)]` on by default

warning: `pallet-society` (lib) generated 1 warning
warning: extern crate `sc_consensus` is unused in crate `fc_rpc`
  --> client/rpc/src/lib.rs:19:1
   |
19 | #![allow(
   | ^
   |
   = help: remove the dependency or add `use sc_consensus as _;` to the crate root
note: the lint level is defined here
  --> client/rpc/src/lib.rs:27:9
   |
27 | #![warn(unused_crate_dependencies)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: extern crate `sc_consensus_babe` is unused in crate `fc_rpc`
  --> client/rpc/src/lib.rs:19:1
   |
19 | #![allow(
   | ^
   |
   = help: remove the dependency or add `use sc_consensus_babe as _;` to the crate root

warning: extern crate `sc_consensus_epochs` is unused in crate `fc_rpc`
  --> client/rpc/src/lib.rs:19:1
   |
19 | #![allow(
   | ^
   |
   = help: remove the dependency or add `use sc_consensus_epochs as _;` to the crate root

warning: extern crate `sp_consensus_babe` is unused in crate `fc_rpc`
  --> client/rpc/src/lib.rs:19:1
   |
19 | #![allow(
   | ^
   |
   = help: remove the dependency or add `use sp_consensus_babe as _;` to the crate root

warning: extern crate `sp_consensus_slots` is unused in crate `fc_rpc`
  --> client/rpc/src/lib.rs:19:1
   |
19 | #![allow(
   | ^
   |
   = help: remove the dependency or add `use sp_consensus_slots as _;` to the crate root

warning: extern crate `sp_keystore` is unused in crate `fc_rpc`
  --> client/rpc/src/lib.rs:19:1
   |
19 | #![allow(
   | ^
   |
   = help: remove the dependency or add `use sp_keystore as _;` to the crate root

warning: `fc-rpc` (lib) generated 6 warnings
warning: unexpected `cfg` condition value: `asset-test-utils`
  --> umbrella/src/lib.rs:15:7
   |
15 | #[cfg(feature = "asset-test-utils")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `asset-test-utils` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `assets-common`
  --> umbrella/src/lib.rs:19:7
   |
19 | #[cfg(feature = "assets-common")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `assets-common` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-asset-hub-rococo`
  --> umbrella/src/lib.rs:27:7
   |
27 | #[cfg(feature = "bp-asset-hub-rococo")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-asset-hub-rococo` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-asset-hub-westend`
  --> umbrella/src/lib.rs:31:7
   |
31 | #[cfg(feature = "bp-asset-hub-westend")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-asset-hub-westend` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-bridge-hub-cumulus`
  --> umbrella/src/lib.rs:35:7
   |
35 | #[cfg(feature = "bp-bridge-hub-cumulus")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-bridge-hub-cumulus` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-bridge-hub-kusama`
  --> umbrella/src/lib.rs:39:7
   |
39 | #[cfg(feature = "bp-bridge-hub-kusama")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-bridge-hub-kusama` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-bridge-hub-polkadot`
  --> umbrella/src/lib.rs:43:7
   |
43 | #[cfg(feature = "bp-bridge-hub-polkadot")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-bridge-hub-polkadot` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-bridge-hub-rococo`
  --> umbrella/src/lib.rs:47:7
   |
47 | #[cfg(feature = "bp-bridge-hub-rococo")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-bridge-hub-rococo` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-bridge-hub-westend`
  --> umbrella/src/lib.rs:51:7
   |
51 | #[cfg(feature = "bp-bridge-hub-westend")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-bridge-hub-westend` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-header-chain`
  --> umbrella/src/lib.rs:55:7
   |
55 | #[cfg(feature = "bp-header-chain")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-header-chain` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-kusama`
  --> umbrella/src/lib.rs:59:7
   |
59 | #[cfg(feature = "bp-kusama")]
   |       ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-kusama` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-messages`
  --> umbrella/src/lib.rs:63:7
   |
63 | #[cfg(feature = "bp-messages")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-messages` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-parachains`
  --> umbrella/src/lib.rs:67:7
   |
67 | #[cfg(feature = "bp-parachains")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-parachains` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-polkadot`
  --> umbrella/src/lib.rs:71:7
   |
71 | #[cfg(feature = "bp-polkadot")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-polkadot` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-polkadot-bulletin`
  --> umbrella/src/lib.rs:75:7
   |
75 | #[cfg(feature = "bp-polkadot-bulletin")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-polkadot-bulletin` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-polkadot-core`
  --> umbrella/src/lib.rs:79:7
   |
79 | #[cfg(feature = "bp-polkadot-core")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-polkadot-core` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-relayers`
  --> umbrella/src/lib.rs:83:7
   |
83 | #[cfg(feature = "bp-relayers")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-relayers` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-rococo`
  --> umbrella/src/lib.rs:87:7
   |
87 | #[cfg(feature = "bp-rococo")]
   |       ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-rococo` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-runtime`
  --> umbrella/src/lib.rs:91:7
   |
91 | #[cfg(feature = "bp-runtime")]
   |       ^^^^^^^^^^------------
   |                 |
   |                 help: there is a expected value with a similar name: `"sp-runtime"`
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-runtime` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-test-utils`
  --> umbrella/src/lib.rs:95:7
   |
95 | #[cfg(feature = "bp-test-utils")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-test-utils` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-westend`
  --> umbrella/src/lib.rs:99:7
   |
99 | #[cfg(feature = "bp-westend")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
   = help: consider adding `bp-westend` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-xcm-bridge-hub`
   --> umbrella/src/lib.rs:103:7
    |
103 | #[cfg(feature = "bp-xcm-bridge-hub")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `bp-xcm-bridge-hub` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bp-xcm-bridge-hub-router`
   --> umbrella/src/lib.rs:107:7
    |
107 | #[cfg(feature = "bp-xcm-bridge-hub-router")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `bp-xcm-bridge-hub-router` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bridge-hub-common`
   --> umbrella/src/lib.rs:111:7
    |
111 | #[cfg(feature = "bridge-hub-common")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `bridge-hub-common` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bridge-hub-test-utils`
   --> umbrella/src/lib.rs:115:7
    |
115 | #[cfg(feature = "bridge-hub-test-utils")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `bridge-hub-test-utils` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `bridge-runtime-common`
   --> umbrella/src/lib.rs:120:7
    |
120 | #[cfg(feature = "bridge-runtime-common")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `bridge-runtime-common` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-client-cli`
   --> umbrella/src/lib.rs:124:7
    |
124 | #[cfg(feature = "cumulus-client-cli")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-client-cli` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-client-collator`
   --> umbrella/src/lib.rs:128:7
    |
128 | #[cfg(feature = "cumulus-client-collator")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-client-collator` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-client-consensus-aura`
   --> umbrella/src/lib.rs:132:7
    |
132 | #[cfg(feature = "cumulus-client-consensus-aura")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-client-consensus-aura` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-client-consensus-common`
   --> umbrella/src/lib.rs:136:7
    |
136 | #[cfg(feature = "cumulus-client-consensus-common")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-client-consensus-common` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-client-consensus-proposer`
   --> umbrella/src/lib.rs:140:7
    |
140 | #[cfg(feature = "cumulus-client-consensus-proposer")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-client-consensus-proposer` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-client-consensus-relay-chain`
   --> umbrella/src/lib.rs:144:7
    |
144 | #[cfg(feature = "cumulus-client-consensus-relay-chain")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-client-consensus-relay-chain` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-client-network`
   --> umbrella/src/lib.rs:148:7
    |
148 | #[cfg(feature = "cumulus-client-network")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-client-network` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-client-parachain-inherent`
   --> umbrella/src/lib.rs:153:7
    |
153 | #[cfg(feature = "cumulus-client-parachain-inherent")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-client-parachain-inherent` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-client-pov-recovery`
   --> umbrella/src/lib.rs:157:7
    |
157 | #[cfg(feature = "cumulus-client-pov-recovery")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-client-pov-recovery` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-client-service`
   --> umbrella/src/lib.rs:161:7
    |
161 | #[cfg(feature = "cumulus-client-service")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-client-service` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-pallet-aura-ext`
   --> umbrella/src/lib.rs:165:7
    |
165 | #[cfg(feature = "cumulus-pallet-aura-ext")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-pallet-aura-ext` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-pallet-dmp-queue`
   --> umbrella/src/lib.rs:169:7
    |
169 | #[cfg(feature = "cumulus-pallet-dmp-queue")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-pallet-dmp-queue` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-pallet-parachain-system`
   --> umbrella/src/lib.rs:173:7
    |
173 | #[cfg(feature = "cumulus-pallet-parachain-system")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-pallet-parachain-system` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-pallet-parachain-system-proc-macro`
   --> umbrella/src/lib.rs:177:7
    |
177 | #[cfg(feature = "cumulus-pallet-parachain-system-proc-macro")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-pallet-parachain-system-proc-macro` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-pallet-session-benchmarking`
   --> umbrella/src/lib.rs:181:7
    |
181 | #[cfg(feature = "cumulus-pallet-session-benchmarking")]
    |       ^^^^^^^^^^-------------------------------------
    |                 |
    |                 help: there is a expected value with a similar name: `"pallet-session-benchmarking"`
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-pallet-session-benchmarking` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-pallet-solo-to-para`
   --> umbrella/src/lib.rs:185:7
    |
185 | #[cfg(feature = "cumulus-pallet-solo-to-para")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-pallet-solo-to-para` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-pallet-xcm`
   --> umbrella/src/lib.rs:189:7
    |
189 | #[cfg(feature = "cumulus-pallet-xcm")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-pallet-xcm` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-pallet-xcmp-queue`
   --> umbrella/src/lib.rs:193:7
    |
193 | #[cfg(feature = "cumulus-pallet-xcmp-queue")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-pallet-xcmp-queue` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-ping`
   --> umbrella/src/lib.rs:197:7
    |
197 | #[cfg(feature = "cumulus-ping")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-ping` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-primitives-aura`
   --> umbrella/src/lib.rs:201:7
    |
201 | #[cfg(feature = "cumulus-primitives-aura")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-primitives-aura` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-primitives-core`
   --> umbrella/src/lib.rs:205:7
    |
205 | #[cfg(feature = "cumulus-primitives-core")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-primitives-core` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-primitives-parachain-inherent`
   --> umbrella/src/lib.rs:210:7
    |
210 | #[cfg(feature = "cumulus-primitives-parachain-inherent")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-primitives-parachain-inherent` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-primitives-proof-size-hostfunction`
   --> umbrella/src/lib.rs:214:7
    |
214 | #[cfg(feature = "cumulus-primitives-proof-size-hostfunction")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-primitives-proof-size-hostfunction` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-primitives-storage-weight-reclaim`
   --> umbrella/src/lib.rs:218:7
    |
218 | #[cfg(feature = "cumulus-primitives-storage-weight-reclaim")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-primitives-storage-weight-reclaim` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-primitives-timestamp`
   --> umbrella/src/lib.rs:222:7
    |
222 | #[cfg(feature = "cumulus-primitives-timestamp")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-primitives-timestamp` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-primitives-utility`
   --> umbrella/src/lib.rs:226:7
    |
226 | #[cfg(feature = "cumulus-primitives-utility")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-primitives-utility` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-relay-chain-inprocess-interface`
   --> umbrella/src/lib.rs:230:7
    |
230 | #[cfg(feature = "cumulus-relay-chain-inprocess-interface")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-relay-chain-inprocess-interface` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-relay-chain-interface`
   --> umbrella/src/lib.rs:234:7
    |
234 | #[cfg(feature = "cumulus-relay-chain-interface")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-relay-chain-interface` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-relay-chain-minimal-node`
   --> umbrella/src/lib.rs:238:7
    |
238 | #[cfg(feature = "cumulus-relay-chain-minimal-node")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-relay-chain-minimal-node` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-relay-chain-rpc-interface`
   --> umbrella/src/lib.rs:242:7
    |
242 | #[cfg(feature = "cumulus-relay-chain-rpc-interface")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-relay-chain-rpc-interface` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `cumulus-test-relay-sproof-builder`
   --> umbrella/src/lib.rs:246:7
    |
246 | #[cfg(feature = "cumulus-test-relay-sproof-builder")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `cumulus-test-relay-sproof-builder` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `emulated-integration-tests-common`
   --> umbrella/src/lib.rs:250:7
    |
250 | #[cfg(feature = "emulated-integration-tests-common")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `emulated-integration-tests-common` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-bridge-grandpa`
   --> umbrella/src/lib.rs:410:7
    |
410 | #[cfg(feature = "pallet-bridge-grandpa")]
    |       ^^^^^^^^^^-----------------------
    |                 |
    |                 help: there is a expected value with a similar name: `"pallet-grandpa"`
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-bridge-grandpa` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-bridge-messages`
   --> umbrella/src/lib.rs:414:7
    |
414 | #[cfg(feature = "pallet-bridge-messages")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-bridge-messages` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-bridge-parachains`
   --> umbrella/src/lib.rs:418:7
    |
418 | #[cfg(feature = "pallet-bridge-parachains")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-bridge-parachains` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-bridge-relayers`
   --> umbrella/src/lib.rs:422:7
    |
422 | #[cfg(feature = "pallet-bridge-relayers")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-bridge-relayers` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-collator-selection`
   --> umbrella/src/lib.rs:434:7
    |
434 | #[cfg(feature = "pallet-collator-selection")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-collator-selection` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-collective-content`
   --> umbrella/src/lib.rs:443:7
    |
443 | #[cfg(feature = "pallet-collective-content")]
    |       ^^^^^^^^^^---------------------------
    |                 |
    |                 help: there is a expected value with a similar name: `"pallet-collective"`
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-collective-content` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-contracts-mock-network`
   --> umbrella/src/lib.rs:451:7
    |
451 | #[cfg(feature = "pallet-contracts-mock-network")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-contracts-mock-network` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-contracts-proc-macro`
   --> umbrella/src/lib.rs:455:7
    |
455 | #[cfg(feature = "pallet-contracts-proc-macro")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-contracts-proc-macro` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-contracts-uapi`
   --> umbrella/src/lib.rs:459:7
    |
459 | #[cfg(feature = "pallet-contracts-uapi")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-contracts-uapi` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-xcm`
   --> umbrella/src/lib.rs:741:7
    |
741 | #[cfg(feature = "pallet-xcm")]
    |       ^^^^^^^^^^------------
    |                 |
    |                 help: there is a expected value with a similar name: `"pallet-nis"`
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-xcm` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-xcm-benchmarks`
   --> umbrella/src/lib.rs:745:7
    |
745 | #[cfg(feature = "pallet-xcm-benchmarks")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-xcm-benchmarks` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-xcm-bridge-hub`
   --> umbrella/src/lib.rs:749:7
    |
749 | #[cfg(feature = "pallet-xcm-bridge-hub")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-xcm-bridge-hub` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `pallet-xcm-bridge-hub-router`
   --> umbrella/src/lib.rs:753:7
    |
753 | #[cfg(feature = "pallet-xcm-bridge-hub-router")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `pallet-xcm-bridge-hub-router` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `parachains-common`
   --> umbrella/src/lib.rs:757:7
    |
757 | #[cfg(feature = "parachains-common")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `parachains-common` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `parachains-runtimes-test-utils`
   --> umbrella/src/lib.rs:761:7
    |
761 | #[cfg(feature = "parachains-runtimes-test-utils")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `parachains-runtimes-test-utils` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-approval-distribution`
   --> umbrella/src/lib.rs:766:7
    |
766 | #[cfg(feature = "polkadot-approval-distribution")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-approval-distribution` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-availability-bitfield-distribution`
   --> umbrella/src/lib.rs:771:7
    |
771 | #[cfg(feature = "polkadot-availability-bitfield-distribution")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-availability-bitfield-distribution` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-availability-distribution`
   --> umbrella/src/lib.rs:776:7
    |
776 | #[cfg(feature = "polkadot-availability-distribution")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-availability-distribution` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-availability-recovery`
   --> umbrella/src/lib.rs:781:7
    |
781 | #[cfg(feature = "polkadot-availability-recovery")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-availability-recovery` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-cli`
   --> umbrella/src/lib.rs:785:7
    |
785 | #[cfg(feature = "polkadot-cli")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-cli` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-collator-protocol`
   --> umbrella/src/lib.rs:790:7
    |
790 | #[cfg(feature = "polkadot-collator-protocol")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-collator-protocol` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-core-primitives`
   --> umbrella/src/lib.rs:794:7
    |
794 | #[cfg(feature = "polkadot-core-primitives")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-core-primitives` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-dispute-distribution`
   --> umbrella/src/lib.rs:799:7
    |
799 | #[cfg(feature = "polkadot-dispute-distribution")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-dispute-distribution` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-erasure-coding`
   --> umbrella/src/lib.rs:803:7
    |
803 | #[cfg(feature = "polkadot-erasure-coding")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-erasure-coding` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-gossip-support`
   --> umbrella/src/lib.rs:808:7
    |
808 | #[cfg(feature = "polkadot-gossip-support")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-gossip-support` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-network-bridge`
   --> umbrella/src/lib.rs:812:7
    |
812 | #[cfg(feature = "polkadot-network-bridge")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-network-bridge` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-collation-generation`
   --> umbrella/src/lib.rs:816:7
    |
816 | #[cfg(feature = "polkadot-node-collation-generation")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-collation-generation` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-approval-voting`
   --> umbrella/src/lib.rs:820:7
    |
820 | #[cfg(feature = "polkadot-node-core-approval-voting")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-approval-voting` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-av-store`
   --> umbrella/src/lib.rs:825:7
    |
825 | #[cfg(feature = "polkadot-node-core-av-store")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-av-store` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-backing`
   --> umbrella/src/lib.rs:830:7
    |
830 | #[cfg(feature = "polkadot-node-core-backing")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-backing` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-bitfield-signing`
   --> umbrella/src/lib.rs:834:7
    |
834 | #[cfg(feature = "polkadot-node-core-bitfield-signing")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-bitfield-signing` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-candidate-validation`
   --> umbrella/src/lib.rs:839:7
    |
839 | #[cfg(feature = "polkadot-node-core-candidate-validation")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-candidate-validation` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-chain-api`
   --> umbrella/src/lib.rs:844:7
    |
844 | #[cfg(feature = "polkadot-node-core-chain-api")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-chain-api` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-chain-selection`
   --> umbrella/src/lib.rs:848:7
    |
848 | #[cfg(feature = "polkadot-node-core-chain-selection")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-chain-selection` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-dispute-coordinator`
   --> umbrella/src/lib.rs:852:7
    |
852 | #[cfg(feature = "polkadot-node-core-dispute-coordinator")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-dispute-coordinator` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-parachains-inherent`
   --> umbrella/src/lib.rs:856:7
    |
856 | #[cfg(feature = "polkadot-node-core-parachains-inherent")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-parachains-inherent` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-prospective-parachains`
   --> umbrella/src/lib.rs:860:7
    |
860 | #[cfg(feature = "polkadot-node-core-prospective-parachains")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-prospective-parachains` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-provisioner`
   --> umbrella/src/lib.rs:865:7
    |
865 | #[cfg(feature = "polkadot-node-core-provisioner")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-provisioner` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-pvf`
   --> umbrella/src/lib.rs:870:7
    |
870 | #[cfg(feature = "polkadot-node-core-pvf")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-pvf` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-pvf-checker`
   --> umbrella/src/lib.rs:875:7
    |
875 | #[cfg(feature = "polkadot-node-core-pvf-checker")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-pvf-checker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-pvf-common`
   --> umbrella/src/lib.rs:880:7
    |
880 | #[cfg(feature = "polkadot-node-core-pvf-common")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-pvf-common` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-pvf-execute-worker`
   --> umbrella/src/lib.rs:885:7
    |
885 | #[cfg(feature = "polkadot-node-core-pvf-execute-worker")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-pvf-execute-worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-pvf-prepare-worker`
   --> umbrella/src/lib.rs:890:7
    |
890 | #[cfg(feature = "polkadot-node-core-pvf-prepare-worker")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-pvf-prepare-worker` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-core-runtime-api`
   --> umbrella/src/lib.rs:894:7
    |
894 | #[cfg(feature = "polkadot-node-core-runtime-api")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-core-runtime-api` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-jaeger`
   --> umbrella/src/lib.rs:898:7
    |
898 | #[cfg(feature = "polkadot-node-jaeger")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-jaeger` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-metrics`
   --> umbrella/src/lib.rs:902:7
    |
902 | #[cfg(feature = "polkadot-node-metrics")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-metrics` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-network-protocol`
   --> umbrella/src/lib.rs:906:7
    |
906 | #[cfg(feature = "polkadot-node-network-protocol")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-network-protocol` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-primitives`
   --> umbrella/src/lib.rs:910:7
    |
910 | #[cfg(feature = "polkadot-node-primitives")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-primitives` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-subsystem`
   --> umbrella/src/lib.rs:914:7
    |
914 | #[cfg(feature = "polkadot-node-subsystem")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-subsystem` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-subsystem-types`
   --> umbrella/src/lib.rs:918:7
    |
918 | #[cfg(feature = "polkadot-node-subsystem-types")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-subsystem-types` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-node-subsystem-util`
   --> umbrella/src/lib.rs:922:7
    |
922 | #[cfg(feature = "polkadot-node-subsystem-util")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-node-subsystem-util` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-overseer`
   --> umbrella/src/lib.rs:926:7
    |
926 | #[cfg(feature = "polkadot-overseer")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-overseer` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-parachain-primitives`
   --> umbrella/src/lib.rs:930:7
    |
930 | #[cfg(feature = "polkadot-parachain-primitives")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-parachain-primitives` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-primitives`
   --> umbrella/src/lib.rs:934:7
    |
934 | #[cfg(feature = "polkadot-primitives")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-primitives` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-rpc`
   --> umbrella/src/lib.rs:938:7
    |
938 | #[cfg(feature = "polkadot-rpc")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-rpc` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-runtime-common`
   --> umbrella/src/lib.rs:942:7
    |
942 | #[cfg(feature = "polkadot-runtime-common")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-runtime-common` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-runtime-metrics`
   --> umbrella/src/lib.rs:946:7
    |
946 | #[cfg(feature = "polkadot-runtime-metrics")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-runtime-metrics` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-runtime-parachains`
   --> umbrella/src/lib.rs:950:7
    |
950 | #[cfg(feature = "polkadot-runtime-parachains")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-runtime-parachains` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-service`
   --> umbrella/src/lib.rs:959:7
    |
959 | #[cfg(feature = "polkadot-service")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-service` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-statement-distribution`
   --> umbrella/src/lib.rs:963:7
    |
963 | #[cfg(feature = "polkadot-statement-distribution")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-statement-distribution` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `polkadot-statement-table`
   --> umbrella/src/lib.rs:967:7
    |
967 | #[cfg(feature = "polkadot-statement-table")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `polkadot-statement-table` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `rococo-runtime-constants`
   --> umbrella/src/lib.rs:971:7
    |
971 | #[cfg(feature = "rococo-runtime-constants")]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
    = help: consider adding `rococo-runtime-constants` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `slot-range-helper`
    --> umbrella/src/lib.rs:1192:7
     |
1192 | #[cfg(feature = "slot-range-helper")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `slot-range-helper` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-beacon-primitives`
    --> umbrella/src/lib.rs:1196:7
     |
1196 | #[cfg(feature = "snowbridge-beacon-primitives")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-beacon-primitives` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-core`
    --> umbrella/src/lib.rs:1200:7
     |
1200 | #[cfg(feature = "snowbridge-core")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-core` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-ethereum`
    --> umbrella/src/lib.rs:1204:7
     |
1204 | #[cfg(feature = "snowbridge-ethereum")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-ethereum` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-outbound-queue-merkle-tree`
    --> umbrella/src/lib.rs:1208:7
     |
1208 | #[cfg(feature = "snowbridge-outbound-queue-merkle-tree")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-outbound-queue-merkle-tree` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-outbound-queue-runtime-api`
    --> umbrella/src/lib.rs:1212:7
     |
1212 | #[cfg(feature = "snowbridge-outbound-queue-runtime-api")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-outbound-queue-runtime-api` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-pallet-ethereum-client`
    --> umbrella/src/lib.rs:1216:7
     |
1216 | #[cfg(feature = "snowbridge-pallet-ethereum-client")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-pallet-ethereum-client` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-pallet-ethereum-client-fixtures`
    --> umbrella/src/lib.rs:1220:7
     |
1220 | #[cfg(feature = "snowbridge-pallet-ethereum-client-fixtures")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-pallet-ethereum-client-fixtures` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-pallet-inbound-queue`
    --> umbrella/src/lib.rs:1224:7
     |
1224 | #[cfg(feature = "snowbridge-pallet-inbound-queue")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-pallet-inbound-queue` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-pallet-inbound-queue-fixtures`
    --> umbrella/src/lib.rs:1228:7
     |
1228 | #[cfg(feature = "snowbridge-pallet-inbound-queue-fixtures")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-pallet-inbound-queue-fixtures` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-pallet-outbound-queue`
    --> umbrella/src/lib.rs:1232:7
     |
1232 | #[cfg(feature = "snowbridge-pallet-outbound-queue")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-pallet-outbound-queue` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-pallet-system`
    --> umbrella/src/lib.rs:1236:7
     |
1236 | #[cfg(feature = "snowbridge-pallet-system")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-pallet-system` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-router-primitives`
    --> umbrella/src/lib.rs:1240:7
     |
1240 | #[cfg(feature = "snowbridge-router-primitives")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-router-primitives` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-runtime-common`
    --> umbrella/src/lib.rs:1244:7
     |
1244 | #[cfg(feature = "snowbridge-runtime-common")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-runtime-common` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-runtime-test-common`
    --> umbrella/src/lib.rs:1248:7
     |
1248 | #[cfg(feature = "snowbridge-runtime-test-common")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-runtime-test-common` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `snowbridge-system-runtime-api`
    --> umbrella/src/lib.rs:1252:7
     |
1252 | #[cfg(feature = "snowbridge-system-runtime-api")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `snowbridge-system-runtime-api` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `staging-parachain-info`
    --> umbrella/src/lib.rs:1486:7
     |
1486 | #[cfg(feature = "staging-parachain-info")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `staging-parachain-info` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `staging-tracking-allocator`
    --> umbrella/src/lib.rs:1490:7
     |
1490 | #[cfg(feature = "staging-tracking-allocator")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `staging-tracking-allocator` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `staging-xcm`
    --> umbrella/src/lib.rs:1494:7
     |
1494 | #[cfg(feature = "staging-xcm")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `staging-xcm` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `staging-xcm-builder`
    --> umbrella/src/lib.rs:1498:7
     |
1498 | #[cfg(feature = "staging-xcm-builder")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `staging-xcm-builder` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `staging-xcm-executor`
    --> umbrella/src/lib.rs:1502:7
     |
1502 | #[cfg(feature = "staging-xcm-executor")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `staging-xcm-executor` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `testnet-parachains-constants`
    --> umbrella/src/lib.rs:1543:7
     |
1543 | #[cfg(feature = "testnet-parachains-constants")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `testnet-parachains-constants` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `tracing-gum`
    --> umbrella/src/lib.rs:1547:7
     |
1547 | #[cfg(feature = "tracing-gum")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `tracing-gum` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `tracing-gum-proc-macro`
    --> umbrella/src/lib.rs:1552:7
     |
1552 | #[cfg(feature = "tracing-gum-proc-macro")]
     |       ^^^^^^^^^^------------------------
     |                 |
     |                 help: there is a expected value with a similar name: `"sc-tracing-proc-macro"`
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `tracing-gum-proc-macro` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `westend-runtime-constants`
    --> umbrella/src/lib.rs:1556:7
     |
1556 | #[cfg(feature = "westend-runtime-constants")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `westend-runtime-constants` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `xcm-emulator`
    --> umbrella/src/lib.rs:1560:7
     |
1560 | #[cfg(feature = "xcm-emulator")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `xcm-emulator` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `xcm-procedural`
    --> umbrella/src/lib.rs:1564:7
     |
1564 | #[cfg(feature = "xcm-procedural")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `xcm-procedural` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `xcm-runtime-apis`
    --> umbrella/src/lib.rs:1568:7
     |
1568 | #[cfg(feature = "xcm-runtime-apis")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `xcm-runtime-apis` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `xcm-simulator`
    --> umbrella/src/lib.rs:1572:7
     |
1572 | #[cfg(feature = "xcm-simulator")]
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `binary-merkle-tree`, `default`, `experimental`, `fork-tree`, `frame-benchmarking`, `frame-benchmarking-cli`, `frame-benchmarking-pallet-pov`, `frame-election-provider-solution-type`, `frame-election-provider-support`, `frame-executive`, `frame-metadata-hash-extension`, `frame-remote-externalities`, `frame-support`, `frame-support-procedural`, `frame-support-procedural-tools`, `frame-support-procedural-tools-derive`, `frame-system`, `frame-system-benchmarking`, `frame-system-rpc-runtime-api`, `frame-try-runtime`, `generate-bags`, `mmr-gadget`, `mmr-rpc`, `node`, `pallet-alliance`, `pallet-asset-conversion`, `pallet-asset-conversion-ops`, `pallet-asset-conversion-tx-payment`, `pallet-asset-rate`, `pallet-asset-tx-payment`, `pallet-assets`, `pallet-assets-freezer`, `pallet-atomic-swap`, `pallet-aura`, and `pallet-authority-discovery` and 206 more
     = help: consider adding `xcm-simulator` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: method `code_len` is never used
   --> substrate/frame/contracts/src/exec.rs:458:5
    |
425 | pub trait Executable<T: Config>: Sized {
    |           ---------- method in this trait
...
458 |     fn code_len(&self) -> u32;
    |        ^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: type alias `CallOf` is never used
  --> substrate/frame/contracts/src/wasm/runtime.rs:43:6
   |
43 | type CallOf<T> = <T as frame_system::Config>::RuntimeCall;
   |      ^^^^^^

warning: variant `CallXcmExecute` is never constructed
   --> substrate/frame/contracts/src/wasm/runtime.rs:241:2
    |
149 | pub enum RuntimeCosts {
    |          ------------ variant in this enum
...
241 |     CallXcmExecute(Weight),
    |     ^^^^^^^^^^^^^^
    |
    = note: `RuntimeCosts` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: unexpected `cfg` condition value: `try-runtime`
  --> frame/pallet-counter/src/lib.rs:28:1
   |
28 | #[frame_support::pallet]
   | ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `default` and `std`
   = note: using a cfg inside a attribute macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `frame_support::pallet` crate for guidance on how handle this unexpected cfg
   = help: the attribute macro `frame_support::pallet` may come from an old version of the `frame_support_procedural` crate, try updating your dependency with `cargo update -p frame_support_procedural`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default
   = note: this warning originates in the attribute macro `frame_support::pallet` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `try-runtime`
  --> frame/pallet-counter/src/lib.rs:66:15
   |
66 |     #[pallet::pallet]
   |               ^^^^^^
   |
   = note: expected values for `feature` are: `default` and `std`
   = help: consider adding `try-runtime` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `hex_literal::hex`
  --> frame/pallet-counter/src/lib.rs:47:9
   |
47 |     use hex_literal::hex;
   |         ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `pallet_evm:: PrecompileSet`
  --> frame/pallet-counter/src/lib.rs:48:9
   |
48 |     use pallet_evm:: PrecompileSet;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `sp_runtime::AccountId32`
  --> frame/pallet-counter/src/lib.rs:51:9
   |
51 |     use sp_runtime::AccountId32;
   |         ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `sp_runtime::print`
  --> frame/pallet-counter/src/lib.rs:54:9
   |
54 |     use sp_runtime::print;
   |         ^^^^^^^^^^^^^^^^^

warning: use of deprecated constant `pallet::warnings::ConstantWeight_0::_w`: 
                 It is deprecated to use hard-coded constant as call weight.
                 Please instead benchmark all calls or put the pallet into `dev` mode.
         
                 For more info see:
                     <https://github.com/paritytech/substrate/pull/13798>
   --> frame/pallet-counter/src/lib.rs:133:26
    |
133 |         #[pallet::weight(10_000)]
    |                          ^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated constant `pallet::warnings::ConstantWeight_1::_w`: 
                 It is deprecated to use hard-coded constant as call weight.
                 Please instead benchmark all calls or put the pallet into `dev` mode.
         
                 For more info see:
                     <https://github.com/paritytech/substrate/pull/13798>
   --> frame/pallet-counter/src/lib.rs:143:26
    |
143 |         #[pallet::weight(10_000)]
    |                          ^^^^^^

warning: use of deprecated constant `pallet::warnings::ConstantWeight_2::_w`: 
                 It is deprecated to use hard-coded constant as call weight.
                 Please instead benchmark all calls or put the pallet into `dev` mode.
         
                 For more info see:
                     <https://github.com/paritytech/substrate/pull/13798>
   --> frame/pallet-counter/src/lib.rs:158:26
    |
158 |         #[pallet::weight(10_000)]
    |                          ^^^^^^

warning: use of deprecated constant `pallet::warnings::ConstantWeight_3::_w`: 
                 It is deprecated to use hard-coded constant as call weight.
                 Please instead benchmark all calls or put the pallet into `dev` mode.
         
                 For more info see:
                     <https://github.com/paritytech/substrate/pull/13798>
   --> frame/pallet-counter/src/lib.rs:171:26
    |
171 |         #[pallet::weight(10_000)]
    |                          ^^^^^^

warning: use of deprecated constant `pallet::warnings::ConstantWeight_4::_w`: 
                 It is deprecated to use hard-coded constant as call weight.
                 Please instead benchmark all calls or put the pallet into `dev` mode.
         
                 For more info see:
                     <https://github.com/paritytech/substrate/pull/13798>
   --> frame/pallet-counter/src/lib.rs:192:26
    |
192 |         #[pallet::weight(10_000)]
    |                          ^^^^^^

warning: use of deprecated constant `pallet::warnings::ConstantWeight_5::_w`: 
                 It is deprecated to use hard-coded constant as call weight.
                 Please instead benchmark all calls or put the pallet into `dev` mode.
         
                 For more info see:
                     <https://github.com/paritytech/substrate/pull/13798>
   --> frame/pallet-counter/src/lib.rs:204:26
    |
204 |         #[pallet::weight(10_000)]
    |                          ^^^^^^

warning: use of deprecated constant `pallet::warnings::ConstantWeight_6::_w`: 
                 It is deprecated to use hard-coded constant as call weight.
                 Please instead benchmark all calls or put the pallet into `dev` mode.
         
                 For more info see:
                     <https://github.com/paritytech/substrate/pull/13798>
   --> frame/pallet-counter/src/lib.rs:235:26
    |
235 |         #[pallet::weight(10_000)]
    |                          ^^^^^^

warning: use of deprecated constant `pallet::warnings::ConstantWeight_7::_w`: 
                 It is deprecated to use hard-coded constant as call weight.
                 Please instead benchmark all calls or put the pallet into `dev` mode.
         
                 For more info see:
                     <https://github.com/paritytech/substrate/pull/13798>
   --> frame/pallet-counter/src/lib.rs:304:26
    |
304 |         #[pallet::weight(5_000)]
    |                          ^^^^^

warning: use of deprecated constant `pallet::warnings::ConstantWeight_8::_w`: 
                 It is deprecated to use hard-coded constant as call weight.
                 Please instead benchmark all calls or put the pallet into `dev` mode.
         
                 For more info see:
                     <https://github.com/paritytech/substrate/pull/13798>
   --> frame/pallet-counter/src/lib.rs:348:26
    |
348 |         #[pallet::weight(10_000)]
    |                          ^^^^^^

warning: use of deprecated constant `pallet::warnings::ConstantWeight_9::_w`: 
                 It is deprecated to use hard-coded constant as call weight.
                 Please instead benchmark all calls or put the pallet into `dev` mode.
         
                 For more info see:
                     <https://github.com/paritytech/substrate/pull/13798>
   --> frame/pallet-counter/src/lib.rs:394:26
    |
394 |         #[pallet::weight(10_000)]
    |                          ^^^^^^

warning: use of deprecated constant `pallet::warnings::ConstantWeight_10::_w`: 
                 It is deprecated to use hard-coded constant as call weight.
                 Please instead benchmark all calls or put the pallet into `dev` mode.
         
                 For more info see:
                     <https://github.com/paritytech/substrate/pull/13798>
   --> frame/pallet-counter/src/lib.rs:409:26
    |
409 |         #[pallet::weight(10_000)]
    |                          ^^^^^^

warning: unused implementer of `frame_support::traits::Imbalance` that must be used
   --> frame/pallet-counter/src/lib.rs:138:13
    |
138 |             T::SubstrateCurrency::deposit_creating(&account, amount);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_must_use)]` on by default

warning: unused implementer of `frame_support::traits::Imbalance` that must be used
   --> frame/pallet-counter/src/lib.rs:148:13
    |
148 | /             T::SubstrateCurrency::withdraw(
149 | |                 &account,
150 | |                 amount,
151 | |                 frame_support::traits::WithdrawReasons::TRANSFER,
152 | |                 frame_support::traits::ExistenceRequirement::KeepAlive,
153 | |             )?;
    | |______________^

warning: unused implementer of `frame_support::traits::Imbalance` that must be used
   --> frame/pallet-counter/src/lib.rs:219:13
    |
219 | /             T::SubstrateCurrency::withdraw(
220 | |                 &substrate_account,
221 | |                 amount,
222 | |                 frame_support::traits::WithdrawReasons::TRANSFER,
223 | |                 frame_support::traits::ExistenceRequirement::KeepAlive,
224 | |             )?;
    | |______________^

warning: unused implementer of `frame_support::traits::Imbalance` that must be used
   --> frame/pallet-counter/src/lib.rs:292:13
    |
292 |             T::SubstrateCurrency::deposit_creating(&substrate_account, substrate_amount);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `fp_account::EthereumSignature`
  --> substrate/bin/node/primitives/src/lib.rs:23:5
   |
23 | use fp_account::EthereumSignature;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: `polkadot-sdk` (lib) generated 149 warnings
warning: `pallet-contracts` (lib) generated 3 warnings
warning: `polkadot-sdk` (lib) generated 149 warnings (149 duplicates)
warning: `pallet-counter` (lib) generated 21 warnings (run `cargo fix --lib -p pallet-counter` to apply 4 suggestions)
warning: `node-primitives` (lib) generated 1 warning (run `cargo fix --lib -p node-primitives` to apply 1 suggestion)
warning: method `one_to_many_error` is never used
  --> client/cli/src/frontier_db_cmd/utils.rs:94:5
   |
65 | pub trait FrontierDbMessage {
   |           ----------------- method in this trait
...
94 |     fn one_to_many_error(&self) -> sc_cli::Error {
   |        ^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `fc-cli` (lib) generated 1 warning
   Compiling argochain-runtime v3.0.0 (/Users/pavondunbar/Argochain-Upgrade/substrate/bin/node/runtime)
warning: unused imports: `AuthorityId as BeefyId`, `Signature as BeefySignature`, and `mmr::MmrLeafVersion`
  --> substrate/bin/node/runtime/src/lib.rs:90:17
   |
90 |     ecdsa_crypto::{AuthorityId as BeefyId, Signature as BeefySignature},
   |                    ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
91 |     mmr::MmrLeafVersion,
   |     ^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `fp_account::EthereumSignature`
   --> substrate/bin/node/runtime/src/lib.rs:145:5
    |
145 | use fp_account::EthereumSignature;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `EnsureAccountId20` and `IdentityAddressMapping`
   --> substrate/bin/node/runtime/src/lib.rs:152:28
    |
152 |     Account as EVMAccount, EnsureAccountId20, EnsureAddressNever, EnsureAddressRoot, FeeCalculator,
    |                            ^^^^^^^^^^^^^^^^^
153 |     GasWeightMapping, HashedAddressMapping, IdentityAddressMapping, Runner,
    |                                             ^^^^^^^^^^^^^^^^^^^^^^

warning: type `EXISTENTIAL_DEPOSIT` should have an upper camel case name
   --> substrate/bin/node/runtime/src/lib.rs:706:12
    |
706 |     pub const EXISTENTIAL_DEPOSIT: u128 = 1 * ARGO;
    |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `ExistentialDeposit`
    |
    = note: `#[warn(non_camel_case_types)]` on by default

warning: unused import: `ByteArray`
  --> substrate/bin/node/runtime/src/lib.rs:95:11
   |
95 |     crypto::{ByteArray, KeyTypeId},
   |              ^^^^^^^^^

warning: constant `IDENTITY_MIGRATION_KEY_LIMIT` is never used
    --> substrate/bin/node/runtime/src/lib.rs:2784:7
     |
2784 | const IDENTITY_MIGRATION_KEY_LIMIT: u64 = u64::MAX;
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: `#[warn(dead_code)]` on by default

warning: type alias `Migrations` is never used
    --> substrate/bin/node/runtime/src/lib.rs:2789:6
     |
2789 | type Migrations = (
     |      ^^^^^^^^^^

warning: unused `PositiveImbalance` that must be used
   --> substrate/bin/node/runtime/src/lib.rs:410:9
    |
410 |         Balances::deposit_creating(&PovAccount::get(), final_pov_reward);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
    |
410 |         let _ = Balances::deposit_creating(&PovAccount::get(), final_pov_reward);
    |         +++++++

   Compiling node-rpc v3.0.0 (/Users/pavondunbar/Argochain-Upgrade/substrate/bin/node/rpc)
warning: extern crate `argochain_runtime` is unused in crate `node_rpc`
  --> substrate/bin/node/rpc/src/lib.rs:18:1
   |
18 | //! A collection of node-specific RPC methods.
   | ^
   |
   = help: remove the dependency or add `use argochain_runtime as _;` to the crate root
note: the lint level is defined here
  --> substrate/bin/node/rpc/src/lib.rs:32:9
   |
32 | #![warn(unused_crate_dependencies)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: extern crate `sc_consensus_beefy_rpc` is unused in crate `node_rpc`
  --> substrate/bin/node/rpc/src/lib.rs:18:1
   |
18 | //! A collection of node-specific RPC methods.
   | ^
   |
   = help: remove the dependency or add `use sc_consensus_beefy_rpc as _;` to the crate root

warning: extern crate `sc_consensus_epochs` is unused in crate `node_rpc`
  --> substrate/bin/node/rpc/src/lib.rs:18:1
   |
18 | //! A collection of node-specific RPC methods.
   | ^
   |
   = help: remove the dependency or add `use sc_consensus_epochs as _;` to the crate root

warning: extern crate `sc_mixnet` is unused in crate `node_rpc`
  --> substrate/bin/node/rpc/src/lib.rs:18:1
   |
18 | //! A collection of node-specific RPC methods.
   | ^
   |
   = help: remove the dependency or add `use sc_mixnet as _;` to the crate root

warning: unused import: `futures::channel::mpsc`
  --> substrate/bin/node/rpc/src/lib.rs:40:5
   |
40 | use futures::channel::mpsc;
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `sp_consensus_babe::BabeApi`
  --> substrate/bin/node/rpc/src/lib.rs:41:5
   |
41 | use sp_consensus_babe::BabeApi;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `sc_consensus_manual_seal::rpc::EngineCommand`
  --> substrate/bin/node/rpc/src/lib.rs:45:5
   |
45 | use sc_consensus_manual_seal::rpc::EngineCommand;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `sp_consensus_aura::sr25519::AuthorityId as AuraId`
  --> substrate/bin/node/rpc/src/lib.rs:46:5
   |
46 | use sp_consensus_aura::sr25519::AuthorityId as AuraId;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `BeefyBestBlockStream` and `BeefyVersionedFinalityProofStream`
  --> substrate/bin/node/rpc/src/lib.rs:49:2
   |
49 |     BeefyBestBlockStream, BeefyVersionedFinalityProofStream,
   |     ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `GrandpaApi`
  --> substrate/bin/node/rpc/src/lib.rs:52:25
   |
52 |     FinalityProofProvider, GrandpaApi, GrandpaJustificationStream, SharedAuthoritySet,
   |                            ^^^^^^^^^^

warning: unused import: `Pool`
  --> substrate/bin/node/rpc/src/lib.rs:59:37
   |
59 | use sc_transaction_pool::{ChainApi, Pool};
   |                                     ^^^^

warning: unused import: `sp_application_crypto::RuntimeAppPublic`
  --> substrate/bin/node/rpc/src/lib.rs:61:5
   |
61 | use sp_application_crypto::RuntimeAppPublic;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `sp_consensus_beefy::AuthorityIdBound`
  --> substrate/bin/node/rpc/src/lib.rs:67:5
   |
67 | use sp_consensus_beefy::AuthorityIdBound;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Hash as HashT`, `HashingFor`, and `NumberFor`
  --> substrate/bin/node/rpc/src/lib.rs:70:22
   |
70 |     Block as BlockT, Hash as HashT, HashingFor, Header as HeaderT, NumberFor,
   |                      ^^^^^^^^^^^^^  ^^^^^^^^^^                     ^^^^^^^^^

warning: unused import: `Backend`
  --> substrate/bin/node/rpc/src/lib.rs:44:21
   |
44 | use sc_client_api::{Backend,backend::StorageProvider, client::BlockchainEvents, AuxStore, UsageProvider};
   |                     ^^^^^^^

warning: unused import: `Header`
  --> substrate/bin/node/rpc/src/lib.rs:70:49
   |
70 |     Block as BlockT, Hash as HashT, HashingFor, Header as HeaderT, NumberFor,
   |                                                 ^^^^^^

warning: missing documentation for a struct
   --> substrate/bin/node/rpc/src/lib.rs:135:1
    |
135 | pub struct DefaultEthConfig<C, BE>(std::marker::PhantomData<(C, BE)>);
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: the lint level is defined here
   --> substrate/bin/node/rpc/src/lib.rs:31:9
    |
31  | #![warn(missing_docs)]
    |         ^^^^^^^^^^^^

warning: `node-rpc` (lib) generated 17 warnings (run `cargo fix --lib -p node-rpc` to apply 10 suggestions)
warning: `argochain-runtime` (lib) generated 8 warnings (run `cargo fix --lib -p argochain-runtime` to apply 3 suggestions)
   Compiling staging-node-cli v3.0.0 (/Users/pavondunbar/Argochain-Upgrade/substrate/bin/node/cli)
warning: unused import: `sc_rpc_spec_v2::chain_spec`
  --> substrate/bin/node/cli/src/chain_spec.rs:21:20
   |
21 | use polkadot_sdk::{sc_rpc_spec_v2::chain_spec, *};
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `RemarkBuilder`, `TransferKeepAliveBuilder`, and `inherent_benchmark_data`
  --> substrate/bin/node/cli/src/command.rs:21:27
   |
21 | use super::benchmarking::{inherent_benchmark_data, RemarkBuilder, TransferKeepAliveBuilder};
   |                           ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `EXISTENTIAL_DEPOSIT` and `ExistentialDeposit`
  --> substrate/bin/node/cli/src/command.rs:28:25
   |
28 | use argochain_runtime::{ExistentialDeposit, RuntimeApi,EXISTENTIAL_DEPOSIT};
   |                         ^^^^^^^^^^^^^^^^^^             ^^^^^^^^^^^^^^^^^^^

warning: unused import: `sp_keyring::Sr25519Keyring`
  --> substrate/bin/node/cli/src/command.rs:34:5
   |
34 | use sp_keyring::Sr25519Keyring;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `sp_runtime::traits::HashingFor`
  --> substrate/bin/node/cli/src/command.rs:35:5
   |
35 | use sp_runtime::traits::HashingFor;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `TransferKeepAliveBuilder`
   --> substrate/bin/node/cli/src/command.rs:107:61
    |
107 |                     inherent_benchmark_data, RemarkBuilder, TransferKeepAliveBuilder,
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Pair` and `ecdsa`
   --> substrate/bin/node/cli/src/command.rs:109:31
    |
109 |                 use sp_core::{ecdsa, Pair};
    |                               ^^^^^  ^^^^

warning: unused import: `fc_consensus::FrontierBlockImport`
  --> substrate/bin/node/cli/src/eth.rs:20:9
   |
20 | pub use fc_consensus::FrontierBlockImport;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `StorageOverrideHandler`
  --> substrate/bin/node/cli/src/eth.rs:23:39
   |
23 | pub use fc_storage::{StorageOverride, StorageOverrideHandler};
   |                                       ^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Hash` and `Nonce`
  --> substrate/bin/node/cli/src/service.rs:45:29
   |
45 | use node_primitives::{Block,Nonce,Hash};
   |                             ^^^^^ ^^^^

warning: unused import: `beefy_primitives::ecdsa_crypto::Public`
  --> substrate/bin/node/cli/src/service.rs:61:5
   |
61 | use beefy_primitives::ecdsa_crypto::Public;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `NetworkBackend`
  --> substrate/bin/node/cli/src/command.rs:32:41
   |
32 | use sc_network::{Litep2pNetworkBackend, NetworkBackend};
   |                                         ^^^^^^^^^^^^^^

warning: unused variable: `num_endowed_accounts`
   --> substrate/bin/node/cli/src/chain_spec.rs:550:46
    |
550 |     let (initial_authorities, endowed_accounts, num_endowed_accounts, stakers) =
    |                                                 ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_num_endowed_accounts`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unreachable pattern
   --> substrate/bin/node/cli/src/command.rs:258:9
    |
258 |         Some(_) => {
    |         ^^^^^^^ no value can reach this
    |
note: multiple earlier patterns match some of the same values
   --> substrate/bin/node/cli/src/command.rs:258:9
    |
95  |         Some(Subcommand::Inspect(cmd)) => {
    |         ------------------------------ matches some of the same values
...
100 |         Some(Subcommand::Benchmark(cmd)) => {
    |         -------------------------------- matches some of the same values
...
179 |         Some(Subcommand::Key(cmd)) => cmd.run(&cli),
    |         -------------------------- matches some of the same values
180 |         Some(Subcommand::Sign(cmd)) => cmd.run(),
    |         --------------------------- matches some of the same values
...
258 |         Some(_) => {
    |         ^^^^^^^ ...and 10 other patterns collectively make this unreachable
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `frontier_block_import`
   --> substrate/bin/node/cli/src/service.rs:251:9
    |
251 |     let frontier_block_import =
    |         ^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_frontier_block_import`

warning: unused variable: `eth_config`
   --> substrate/bin/node/cli/src/service.rs:178:2
    |
178 |     eth_config: &EthConfiguration,
    |     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_eth_config`

warning: unused variable: `mixnet_config`
   --> substrate/bin/node/cli/src/service.rs:179:2
    |
179 |     mixnet_config: Option<&sc_mixnet::Config>,
    |     ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mixnet_config`

warning: unused variable: `mixnet_notification_service`
   --> substrate/bin/node/cli/src/service.rs:412:8
    |
412 |       let mixnet_notification_service = mixnet_config.as_ref().map(|mixnet_config| {
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mixnet_notification_service`

warning: unused variable: `net_config`
   --> substrate/bin/node/cli/src/service.rs:476:9
    |
476 |           let net_config = sc_network::config::FullNetworkConfiguration::<
    |               ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_net_config`

warning: unused variable: `metrics`
   --> substrate/bin/node/cli/src/service.rs:500:9
    |
500 |           let metrics = N::register_notification_metrics(
    |               ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_metrics`

warning: associated function `new` is never used
  --> substrate/bin/node/cli/src/benchmarking.rs:84:9
   |
82 | impl TransferKeepAliveBuilder {
   | ----------------------------- associated function in this implementation
83 |     /// Creates a new [`Self`] from the given client.
84 |     pub fn new(client: Arc<FullClient>, dest: AccountId, value: Balance) -> Self {
   |            ^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: trait `BaseRuntimeApiCollection` is never used
  --> substrate/bin/node/cli/src/client.rs:14:11
   |
14 | pub trait BaseRuntimeApiCollection<Block: BlockT>:
   |           ^^^^^^^^^^^^^^^^^^^^^^^^

warning: trait `RuntimeApiCollection` is never used
  --> substrate/bin/node/cli/src/client.rs:37:11
   |
37 | pub trait RuntimeApiCollection<
   |           ^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> substrate/bin/node/cli/src/cli.rs:45:5
   |
45 |     pub enable_dev_signer: bool,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> substrate/bin/node/cli/src/lib.rs:31:9
   |
31 | #![warn(missing_docs)]
   |         ^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> substrate/bin/node/cli/src/cli.rs:71:5
   |
71 |     pub frontier_sql_backend_pool_size: u32,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
   --> substrate/bin/node/cli/src/cli.rs:117:5
    |
117 |     pub eth: EthConfiguration,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a function
  --> substrate/bin/node/cli/src/eth.rs:30:1
   |
30 | pub fn db_config_dir(config: &Configuration) -> PathBuf {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct
  --> substrate/bin/node/cli/src/eth.rs:34:1
   |
34 | pub struct FrontierPartialComponents {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> substrate/bin/node/cli/src/eth.rs:35:5
   |
35 |     pub filter_pool: Option<FilterPool>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> substrate/bin/node/cli/src/eth.rs:36:5
   |
36 |     pub fee_history_cache: FeeHistoryCache,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> substrate/bin/node/cli/src/eth.rs:37:5
   |
37 |     pub fee_history_cache_limit: FeeHistoryCacheLimit,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a function
  --> substrate/bin/node/cli/src/eth.rs:40:1
   |
40 | / pub fn new_frontier_partial(
41 | |     config: &EthConfiguration,
42 | | ) -> Result<FrontierPartialComponents, ServiceError> {
   | |____________________________________________________^

warning: missing documentation for a function
  --> substrate/bin/node/cli/src/eth.rs:58:1
   |
58 | / pub fn spawn_frontier_tasks<B, RA, HF>(
59 | |     task_manager: &TaskManager,
60 | |     client: Arc<FullClient<B, RA, HF>>,
61 | |     backend: Arc<FullBackend<B>>,
...  |
77 | |     RA::RuntimeApi: EthCompatRuntimeApiCollection<B>,
78 | |     HF: HostFunctions + 'static,
   | |________________________________^

warning: `staging-node-cli` (lib) generated 33 warnings (run `cargo fix --lib -p staging-node-cli` to apply 11 suggestions)
    Finished `release` profile [optimized] target(s) in 1m 11s
